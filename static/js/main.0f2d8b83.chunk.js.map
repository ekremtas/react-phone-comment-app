{"version":3,"sources":["components/Phone/index.js","components/Phone/Phone.js","components/NavigationBar/index.js","components/NavigationBar/NavigationBar.js","components/Sliders/Sliders.js","components/Sliders/index.js","containers/Phones/Phones.js","redux/actions.js","redux/types.js","routes.js","containers/Homepage/Homepage.js","containers/Phones/index.js","App.js","serviceWorker.js","redux/reducers.js","redux/store.js","index.js"],"names":["Phone","props","Col","md","className","Card","CardBody","CardTitle","phone_data","name","CardSubtitle","brand","CardImg","top","width","src","image","alt","CardText","Button","NavigationBar","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","NavbarText","items","altText","caption","header","key","Sliders","UncontrolledCarousel","mapDispatchToProps","getPhones","dispatch","type","axios","get","then","result","payload","data","catch","err","console","log","connect","state","commentsReducer","phones","loading","useEffect","phones_page","Spinner","Row","map","phone","id","routes","path","exact","component","Container","title","Phones","App","route","Boolean","window","location","hostname","match","initialState","reducers","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0f2d8b83.chunk.js","sourcesContent":["import Phone from \"./Phone\";\n\nexport default Phone;\n","import React from \"react\";\nimport {\n  Card,\n  CardImg,\n  CardText,\n  CardBody,\n  Button,\n  CardTitle,\n  CardSubtitle,\n  Col\n} from \"reactstrap\";\n\nconst Phone = (props) => {\n  return (\n    <Col md=\"4\" className=\"mt-4\">\n      <Card>\n        <CardBody>\n          <CardTitle>{props.phone_data.name}</CardTitle>\n          <CardSubtitle>{props.phone_data.brand}</CardSubtitle>\n        </CardBody>\n        <CardImg\n          top\n          width=\"100%\"\n          src={props.phone_data.image[0]}\n          alt={`${props.phone_data.name} image`}\n        />\n        <CardBody>\n          <CardText>\n            Some quick example text to build on the card title and make up the\n            bulk of the card's content.\n          </CardText>\n          <Button>Go commments</Button>\n        </CardBody>\n      </Card>\n    </Col>\n  );\n};\n\nexport default Phone;\n","import NavigationBar from \"./NavigationBar\";\n\nexport default NavigationBar;","import React, { useState } from \"react\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  NavbarText,\n} from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nconst NavigationBar = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n      <Navbar color=\"light\" light expand=\"md\">\n        <NavbarBrand tag={Link} to=\"/react-phone-comment-app/\">\n          BlueYorum\n        </NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <NavItem>\n              <NavLink tag={Link} to=\"/phones\">\n                Phones\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink tag={Link} to=\"/add-phone\">\n                Add Phone\n              </NavLink>\n            </NavItem>\n          </Nav>\n          <NavbarText>React Phone Comment Application</NavbarText>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default NavigationBar;\n","import React from \"react\";\nimport {\n  UncontrolledCarousel\n} from \"reactstrap\";\nconst items = [\n  {\n    src: 'https://www.cinema5d.com/wp-content/uploads/2019/09/iphone-11-final.jpg',\n    altText: 'IPHONE 11 PRO',\n    caption: 'APPLE',\n    header: 'IPHONE 11 PRO',\n    key: '1',\n    width:'100%'\n  },\n  {\n    src: 'https://mediatrend.mediamarkt.com.tr/wp-content/uploads/2019/10/iphone-11-inceleme.jpg',\n    altText: 'IPHONE 11',\n    caption: 'APPLE',\n    header: 'IPHONE 11',\n    key: '2',\n    width:'100%'\n  },\n  {\n    src: 'https://www.lifehacker.com.au/content/uploads/sites/4/2020/04/Iphonese.jpg',\n    altText: 'IPHONE SE',\n    caption: 'APPLE',\n    header: 'IPHONE SE',\n    key: '3',\n    width:'100%'\n  }\n];\n\nconst Sliders = () => <UncontrolledCarousel items={items} />;\n\nexport default Sliders;\n","import Sliders from \"./Sliders\";\n\nexport default Sliders;","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getPhones } from \"../../redux/actions\";\nimport { Phone } from \"../../components\";\nimport { Row, Spinner } from \"reactstrap\";\n\nconst Phones = (props) => {\n  useEffect(() => {\n      props.getPhones();\n  }, []);\n  if (props.loading.phones_page) {\n    return <Spinner className=\"mt-5\" color=\"info\" />;\n  }\n  return (\n    <>\n      <Row>\n        {props.phones.map((phone) => {\n          return <Phone key={phone.id} phone_data={phone} />;\n        })}\n      </Row>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const { phones, loading } = state.commentsReducer;\n  return {\n    phones,\n    loading,\n  };\n};\n\nconst mapDispatchToProps = {\n  getPhones,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Phones);\n","import * as Actions from \"./types\";\nimport axios from \"axios\";\n\nconst apiHost = \"https://5ea5689e2d86f00016b45bf7.mockapi.io\";\n\nexport const getPhones = () => {\n  return (dispatch) => {\n    dispatch({\n      type: Actions.LOADING_PHONE_PAGE,\n    });\n    axios\n      .get(`${apiHost}/phones`)\n      .then((result) => {\n        dispatch({\n          type: Actions.GET_PHONES,\n          payload: result.data,\n        });\n      })\n      .catch((err) => {\n        console.log(\"Axios err\", err);\n      });\n  };\n};","export const GET_PHONES = \"GET_PHONES\";\nexport const LOADING_PHONE_PAGE = \"LOADING_PHONE_PAGE\";","import React from \"react\";\nimport { Phones , Homepage} from \"./containers\";\n\nconst routes = [\n    {\n        path: \"/react-phone-comment-app/\",\n        exact: true,\n        component: Homepage,\n        title: Phones\n    },\n    {\n        path: \"/phones\",\n        exact: false,\n        component: Phones,\n        title: Phones\n    },\n    {\n        path: \"/add-phone\",\n        exact: false,\n        component: () => {return <div><h1>TElefon Ekleeeeee</h1></div>},\n        title: Phones\n    }\n]\n\nexport default routes;","import React from \"react\";\nimport { Sliders } from \"../../components\";\nimport {\n    Row,\n    Container\n  } from \"reactstrap\";\n  \nconst Homepage = () => {\n  return (\n    <Container>\n      <Row>\n        <Sliders />\n      </Row>\n    </Container>\n  );\n};\n\nexport default Homepage;\n","import Phones from \"./Phones\";\n\nexport default Phones;","import React from \"react\";\nimport \"./App.css\";\nimport { NavigationBar } from \"./components\";\nimport { Container } from \"reactstrap\";\nimport { Switch, Route } from \"react-router-dom\";\nimport routes from \"./routes\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container>\n        <NavigationBar />\n\n        <Switch>\n          {routes.map((route) => {\n            return (\n              <Route\n                path={route.path}\n                exact={route.exact}\n                component={route.component}\n              />\n            );\n          })}\n        </Switch>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as Actions from \"./types\";\n\nconst initialState = {\n  phones: [],\n  loading: {}\n};\n\nexport const commentsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case Actions.LOADING_PHONE_PAGE:\n      return {\n        ...state,\n        loading: { phones_page: true },\n      };\n    case Actions.GET_PHONES:\n      return {\n        ...state,\n        loading: { ...state.loading, phones_page: false },\n        phones: action.payload\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers, createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport {commentsReducer} from './reducers';\n\nconst reducers = combineReducers({\n    commentsReducer: commentsReducer,\n});\n\nconst store = createStore(reducers, applyMiddleware(thunk));\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}